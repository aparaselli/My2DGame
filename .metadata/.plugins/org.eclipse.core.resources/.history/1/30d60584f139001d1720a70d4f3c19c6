package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

import entity.Player;
import object.SuperObject;
import tile.TileManager;

public class GamePanel extends JPanel implements Runnable{
	
	// screen settings
	final int originalTileSize = 16; // 16x16 tile
	final int scale = 3; //3x multipyer allows things to better fit 1920x1080
	
	public final int tileSize = originalTileSize * scale; //48 x 48
	public final int maxScreenCol = 16; //can change later
	public final int maxScreenRow = 12;
	public final int screenWidth = tileSize * maxScreenCol; //scaled to 768
	public final int screenHeight = tileSize * maxScreenRow; //scaled to 576
	
	//WORLD SETTINGS
	public final int maxWorldCol = 50;
	public final int maxWorldRow = 50;
	public final int worldWidth = tileSize * maxWorldCol;
	public final int worldHeight = tileSize * maxWorldRow;
	
	//FPS
	int FPS = 60;
	
	TileManager tileM = new TileManager(this);
	KeyHandler keyH= new KeyHandler();
	
	Thread gameThread;
	public CollisionChecker cChecker = new CollisionChecker(this);
	public AssetSetter aSetter = new AssetSetter(this);
	public Player player = new Player(this, keyH);
	public SuperObject obj[] = new SuperObject[10];
	
	
	
	
	
	public GamePanel() {
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
	}
	
	public void setupGame () {
		
		aSetter.setObject();
		
	}
	public void startGameThread() {
		
		gameThread = new Thread(this);
		gameThread.start();
	}

	/* sleep method
	@Override
	public void run() { //gameloop
		
		double drawInterval = 1000000000/FPS; //nano seconds in a second/60 0.1666 seconds
		double nextDrawTime = System.nanoTime() + drawInterval;
		
		
		while(gameThread != null) {
			
			long currentTime = System.nanoTime();
			
			//update char pos
			update();
			//draw
			repaint();
			
			
			
			try {
				double remainingTime = nextDrawTime - System.nanoTime();
				remainingTime = remainingTime/1000000;
				
				if(remainingTime < 0) {
					remainingTime = 0;
				}
				
				Thread.sleep((long) remainingTime);
				
				nextDrawTime += drawInterval;
				
			} catch (InterruptedException e) {
				
				e.printStackTrace();
			}
		}
		
	}
	*/
	public void run() {
		
		double drawInterval = 1000000000/FPS;
		double delta = 0;
		long lastTime = System.nanoTime();
		long currentTime;
		long timer = 0;
		int drawCount = 0;
		
		while(gameThread != null) {
			
			currentTime = System.nanoTime();
			
			delta += (currentTime - lastTime) / drawInterval;
			timer += (currentTime - lastTime);
			lastTime = currentTime;
			
			if(delta >= 1) {
				update();
				repaint();
				delta--;
				drawCount++;
			}
			
			if(timer >= 1000000000) {
				System.out.println("FPS: " + drawCount);
				drawCount = 0;
				timer = 0;
			}
		}
	}
	
	public void update() { //update char pos
		
		player.update();
		
	}
	
	public void paintComponent(Graphics g) { //use to draw screen
		
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D)g;
		//TILE
		tileM.draw(g2);
		
		//Object
		for(int i = 0; i < obj.length; i++) {
			if(obj[i] != null) {
				obj[i].draw(g2, this);
			}
		}
		
		//Player
		player.draw(g2);
		
		g2.dispose();
	}
	

}
